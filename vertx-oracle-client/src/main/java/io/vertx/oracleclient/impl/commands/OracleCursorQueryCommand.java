/*
 * Copyright (c) 2011-2021 Contributors to the Eclipse Foundation
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
 * which is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
 */
package io.vertx.oracleclient.impl.commands;

import io.vertx.core.Future;
import io.vertx.core.impl.ContextInternal;
import io.vertx.oracleclient.OraclePrepareOptions;
import io.vertx.oracleclient.impl.Helper;
import io.vertx.oracleclient.impl.OracleColumnDesc;
import io.vertx.oracleclient.impl.OracleRow;
import io.vertx.oracleclient.impl.RowReader;
import io.vertx.sqlclient.PrepareOptions;
import io.vertx.sqlclient.Row;
import io.vertx.sqlclient.Tuple;
import io.vertx.sqlclient.impl.RowDesc;
import io.vertx.sqlclient.impl.command.ExtendedQueryCommand;
import oracle.jdbc.OraclePreparedStatement;
import oracle.jdbc.OracleResultSet;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Flow;

import static io.vertx.oracleclient.impl.Helper.convertSqlValue;
import static io.vertx.oracleclient.impl.Helper.unwrapOraclePreparedStatement;

public class OracleCursorQueryCommand<C, R> extends QueryCommand<C, R> {
  private final ExtendedQueryCommand<R> command;
  private final Tuple params;

  public OracleCursorQueryCommand(ExtendedQueryCommand<R> command, Tuple params) {
    super(null);
    this.command = command;
    this.params = params;
  }

  @Override
  protected OraclePrepareOptions prepareOptions() {
    PrepareOptions prepareOptions = command.options();
    return prepareOptions instanceof OraclePrepareOptions ? (OraclePrepareOptions) prepareOptions : null;
  }

  @Override
  protected String query() {
    return command.sql();
  }

  @Override
  protected void applyStatementOptions(Statement statement) throws SQLException {
    String cursorId = command.cursorId();
    if (cursorId != null) {
      statement.setCursorName(cursorId);
    }

    int fetch = command.fetch();
    if (fetch > 0) {
      statement.setFetchSize(fetch);
    }
  }

  @Override
  protected void fillStatement(PreparedStatement ps, Connection conn) throws SQLException {
    for (int i = 0; i < params.size(); i++) {
      // we must convert types (to comply to JDBC)
      Object value = adaptType(conn, params.getValue(i));
      ps.setObject(i + 1, value);
    }
  }

  @Override
  protected Future<OracleResponse<R>> doExecute(OraclePreparedStatement ps, ContextInternal context, boolean returnAutoGeneratedKeys) {
    return createRowReader(ps, context)
      .compose(rr -> rr.read(command.fetch()))
      .mapEmpty();
  }

  public Future<RowReader<R, ?>> createRowReader(PreparedStatement sqlStatement, ContextInternal context) {
    OraclePreparedStatement oraclePreparedStatement =
      unwrapOraclePreparedStatement(sqlStatement);
    try {
      Flow.Publisher<OracleResultSet> publisher = oraclePreparedStatement.executeQueryAsyncOracle();
      return Helper.first(publisher, context)
        .compose(ors -> {
          try {
            RowDesc description = OracleColumnDesc.rowDesc(ors.getMetaData());
            List<String> types = new ArrayList<>();
            for (int i = 1; i <= ors.getMetaData().getColumnCount(); i++) {
              types.add(ors.getMetaData().getColumnClassName(i));
            }
            return RowReader.create(ors.publisherOracle(
                or -> Helper.getOrHandleSQLException(() -> transform(types, description, or))),
              command.collector(),
              context,
              command.resultHandler(), description);
          } catch (SQLException e) {
            return context.failedFuture(e);
          }
        });
    } catch (SQLException throwables) {
      return context.failedFuture(throwables);
    }
  }

  private static Row transform(List<String> ors, RowDesc desc, oracle.jdbc.OracleRow or) throws SQLException {
    Row row = new OracleRow(desc);
    for (int i = 1; i <= desc.columnNames().size(); i++) {
      Object res = convertSqlValue(or.getObject(i, getType(ors.get(i - 1))));
      row.addValue(res);
    }
    return row;
  }

  private static Class<?> getType(String cn) {
    try {
      return OraclePreparedQuery.class.getClassLoader().loadClass(cn);
    } catch (ClassNotFoundException e) {
      return null;
    }
  }
}
