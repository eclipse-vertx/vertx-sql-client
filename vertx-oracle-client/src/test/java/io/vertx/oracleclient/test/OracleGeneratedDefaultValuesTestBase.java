/*
 * Copyright (c) 2011-2023 Contributors to the Eclipse Foundation
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
 * which is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
 */

package io.vertx.oracleclient.test;

import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.Handler;
import io.vertx.core.json.JsonArray;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import io.vertx.oracleclient.OracleClient;
import io.vertx.oracleclient.OraclePool;
import io.vertx.oracleclient.OraclePrepareOptions;
import io.vertx.oracleclient.test.junit.OracleRule;
import io.vertx.sqlclient.PoolOptions;
import io.vertx.sqlclient.Row;
import io.vertx.sqlclient.SqlClient;
import io.vertx.sqlclient.Tuple;
import org.junit.After;
import org.junit.Before;
import org.junit.ClassRule;
import org.junit.Test;
import org.junit.runner.RunWith;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

@RunWith(VertxUnitRunner.class)
public abstract class OracleGeneratedDefaultValuesTestBase extends OracleTestBase {

    private static final String DROP = "DROP TABLE EntityWithDefaultValues";
    private static final String CREATE = "CREATE TABLE EntityWithDefaultValues\n" +
            "(\n" +
            "    id NUMBER(10) NOT NULL,\n" +
            "    string VARCHAR2(255) DEFAULT 'default' NOT NULL,\n" +
            "    localDate DATE DEFAULT date '2019-11-04' NOT NULL,\n" +
            "    localDateTime TIMESTAMP DEFAULT timestamp '2018-11-04 00:00:00' NOT NULL,\n" +
            "    inte NUMBER(10) DEFAULT 42 NOT NULL,\n" +
            "    longe NUMBER(19) DEFAULT 84 NOT NULL,\n" +
            "    floate BINARY_FLOAT DEFAULT '42.42' NOT NULL,\n" +
            "    doublee BINARY_DOUBLE DEFAULT '84.84' NOT NULL,\n" +
            "    bigDecimal NUMBER(3,1) DEFAULT '4.2' NOT NULL,\n" +
            "    offsetDateTime TIMESTAMP WITH TIME ZONE DEFAULT timestamp '2019-11-04 00:00:00 +01:02' NOT NULL,\n" +
            "    PRIMARY KEY (id)\n" +
            ")";
    private static final String INSERT = "INSERT INTO EntityWithDefaultValues (id) VALUES (?)";

    @ClassRule
    public static OracleRule oracle = OracleRule.SHARED_INSTANCE;

    protected OraclePool pool;

    @Before
    public void setUp(TestContext ctx) throws Exception {
        pool = OraclePool.pool(vertx, oracle.options(), new PoolOptions());
        pool.withConnection(conn -> {
            return conn.query(DROP).execute()
                    .otherwiseEmpty()
                    .compose(v -> conn.query(CREATE).execute());
        }, ctx.asyncAssertSuccess());
    }

    @Test
    public void shouldRetrieveGeneratedKeyByName(TestContext ctx) {
        doTest(ctx, () -> {
            return new OraclePrepareOptions()
                    .setAutoGeneratedKeysIndexes(new JsonArray()
                            .add("string")
                            .add("localDate")
                            .add("localDateTime")
                            .add("inte")
                            .add("longe")
                            .add("floate")
                            .add("doublee")
                            .add("bigDecimal")
                            .add("offsetDateTime"));
        }, this::verifyGenerated);
    }

    private void doTest(TestContext ctx, Supplier<OraclePrepareOptions> supplier, Consumer<Row> checks) {
        OraclePrepareOptions options = supplier.get();
        withSqlClient(client -> {
            return client.preparedQuery(INSERT, options).execute(Tuple.of(1));
        }, ctx.asyncAssertSuccess(rows -> ctx.verify(v -> {
            checks.accept(rows.property(OracleClient.GENERATED_KEYS));
        })));
    }

    protected abstract <T> void withSqlClient(Function<SqlClient, Future<T>> function, Handler<AsyncResult<T>> handler);

    private void verifyGenerated(Row generated) {
        assertNotNull(generated);
        assertEquals("STRING", generated.getColumnName(0));
        assertEquals("LOCALDATE", generated.getColumnName(1));
        assertEquals("LOCALDATETIME", generated.getColumnName(2));
        assertEquals("INTE", generated.getColumnName(3));
        assertEquals("LONGE", generated.getColumnName(4));
        assertEquals("FLOATE", generated.getColumnName(5));
        assertEquals("DOUBLEE", generated.getColumnName(6));
        assertEquals("BIGDECIMAL", generated.getColumnName(7));
        assertEquals("OFFSETDATETIME", generated.getColumnName(8));

        // Verify generated values equals default values
        assertEquals(generated.getString("string"), "default");
        assertEquals(generated.getLocalDate("localDate"), LocalDate.of(2019, 11, 4));
        assertEquals(generated.getLocalDateTime("localDateTime"), LocalDateTime.of(2018, 11, 4, 0, 0));
        assertEquals((int) generated.getInteger("inte"), 42);
        assertEquals((long) generated.getLong("longe"), 84L);
        assertEquals(generated.getFloat("floate"), 42.42f, 0);
        assertEquals(generated.getDouble("doublee"), 84.84, 0);
        assertEquals(generated.getBigDecimal("bigDecimal"), new BigDecimal("4.2"));
        assertEquals(generated.getOffsetDateTime("offsetDateTime"), OffsetDateTime.of(
                2019, 11, 4, 0, 0, 0, 0,
                ZoneOffset.ofHoursMinutes(1, 2)
        ));
    }

    @After
    public void tearDown(TestContext ctx) throws Exception {
        pool.close(ctx.asyncAssertSuccess());
    }
}
